// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockusecase

import (
	context "context"
	dto "date-apps-be/internal/usecase/user_match/dto"

	mock "github.com/stretchr/testify/mock"

	model "date-apps-be/internal/model"
)

// UserMatchUsecase is an autogenerated mock type for the UserMatchUsecase type
type UserMatchUsecase struct {
	mock.Mock
}

// CreateUserMatch provides a mock function with given fields: ctx, userMatch
func (_m *UserMatchUsecase) CreateUserMatch(ctx context.Context, userMatch *model.UserMatch) error {
	ret := _m.Called(ctx, userMatch)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserMatch) error); ok {
		r0 = rf(ctx, userMatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableUsers provides a mock function with given fields: ctx, userUID, page, limit
func (_m *UserMatchUsecase) GetAvailableUsers(ctx context.Context, userUID string, page uint64, limit uint64) ([]*model.User, int, error) {
	ret := _m.Called(ctx, userUID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableUsers")
	}

	var r0 []*model.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) ([]*model.User, int, error)); ok {
		return rf(ctx, userUID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) []*model.User); ok {
		r0 = rf(ctx, userUID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) int); ok {
		r1 = rf(ctx, userUID, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, uint64, uint64) error); ok {
		r2 = rf(ctx, userUID, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserMatchTodayByUserUIDAndMatchUID provides a mock function with given fields: ctx, userUID, matchUID
func (_m *UserMatchUsecase) GetUserMatchTodayByUserUIDAndMatchUID(ctx context.Context, userUID string, matchUID string) (*model.UserMatch, error) {
	ret := _m.Called(ctx, userUID, matchUID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMatchTodayByUserUIDAndMatchUID")
	}

	var r0 *model.UserMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.UserMatch, error)); ok {
		return rf(ctx, userUID, matchUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.UserMatch); ok {
		r0 = rf(ctx, userUID, matchUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userUID, matchUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMatches provides a mock function with given fields: ctx, d
func (_m *UserMatchUsecase) GetUserMatches(ctx context.Context, d dto.GetUserMatches) ([]*model.UserMatch, error) {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMatches")
	}

	var r0 []*model.UserMatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserMatches) ([]*model.UserMatch, error)); ok {
		return rf(ctx, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserMatches) []*model.UserMatch); ok {
		r0 = rf(ctx, d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserMatch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetUserMatches) error); ok {
		r1 = rf(ctx, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserMatchUsecase creates a new instance of UserMatchUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserMatchUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserMatchUsecase {
	mock := &UserMatchUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
