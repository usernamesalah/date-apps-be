// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockusecase

import (
	context "context"
	dto "date-apps-be/internal/usecase/premium_config/dto"

	mock "github.com/stretchr/testify/mock"

	model "date-apps-be/internal/model"
)

// PremiumConfigUsecase is an autogenerated mock type for the PremiumConfigUsecase type
type PremiumConfigUsecase struct {
	mock.Mock
}

// GetPremiumConfigByUID provides a mock function with given fields: ctx, uid
func (_m *PremiumConfigUsecase) GetPremiumConfigByUID(ctx context.Context, uid string) (*model.PremiumConfig, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetPremiumConfigByUID")
	}

	var r0 *model.PremiumConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.PremiumConfig, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PremiumConfig); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PremiumConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPremiumConfigs provides a mock function with given fields: ctx, page, limit
func (_m *PremiumConfigUsecase) GetPremiumConfigs(ctx context.Context, page uint64, limit uint64) ([]*model.PremiumConfig, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPremiumConfigs")
	}

	var r0 []*model.PremiumConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]*model.PremiumConfig, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []*model.PremiumConfig); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PremiumConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchasePackage provides a mock function with given fields: ctx, d
func (_m *PremiumConfigUsecase) PurchasePackage(ctx context.Context, d dto.UserPurchase) error {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for PurchasePackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserPurchase) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPremiumConfigUsecase creates a new instance of PremiumConfigUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPremiumConfigUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PremiumConfigUsecase {
	mock := &PremiumConfigUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
