// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockrepository

import (
	context "context"
	model "date-apps-be/internal/model"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddSortQuery provides a mock function with given fields: query, allowedFields, sortBy
func (_m *UserRepository) AddSortQuery(query string, allowedFields []string, sortBy string) (string, error) {
	ret := _m.Called(query, allowedFields, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for AddSortQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, string) (string, error)); ok {
		return rf(query, allowedFields, sortBy)
	}
	if rf, ok := ret.Get(0).(func(string, []string, string) string); ok {
		r0 = rf(query, allowedFields, sortBy)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []string, string) error); ok {
		r1 = rf(query, allowedFields, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSortQueryWithPrefix provides a mock function with given fields: query, allowedFields, sortBy
func (_m *UserRepository) AddSortQueryWithPrefix(query string, allowedFields map[string]string, sortBy string) (string, error) {
	ret := _m.Called(query, allowedFields, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for AddSortQueryWithPrefix")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string, string) (string, error)); ok {
		return rf(query, allowedFields, sortBy)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string, string) string); ok {
		r0 = rf(query, allowedFields, sortBy)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string, string) error); ok {
		r1 = rf(query, allowedFields, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Begin provides a mock function with given fields:
func (_m *UserRepository) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: tx
func (_m *UserRepository) Commit(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) CreateUser(ctx context.Context, tx *sql.Tx, user *model.User) (int64, error) {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.User) (int64, error)); ok {
		return rf(ctx, tx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.User) int64); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *model.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, tx, id
func (_m *UserRepository) DeleteUser(ctx context.Context, tx *sql.Tx, id string) error {
	ret := _m.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: ctx, tx, query, args
func (_m *UserRepository) Exec(ctx context.Context, tx *sql.Tx, query string, args []interface{}) (sql.Result, error) {
	ret := _m.Called(ctx, tx, query, args)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, []interface{}) (sql.Result, error)); ok {
		return rf(ctx, tx, query, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, []interface{}) sql.Result); ok {
		r0 = rf(ctx, tx, query, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, []interface{}) error); ok {
		r1 = rf(ctx, tx, query, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOffset provides a mock function with given fields: page, limit
func (_m *UserRepository) GetOffset(page uint64, limit uint64) uint64 {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOffset")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(uint64, uint64) uint64); ok {
		r0 = rf(page, limit)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetUserByEmailOrPhoneNumber provides a mock function with given fields: ctx, email, phoneNumber
func (_m *UserRepository) GetUserByEmailOrPhoneNumber(ctx context.Context, email string, phoneNumber string) (*model.User, error) {
	ret := _m.Called(ctx, email, phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailOrPhoneNumber")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, email, phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, email, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserByUID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Master provides a mock function with given fields:
func (_m *UserRepository) Master() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Master")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// NewNullString provides a mock function with given fields: str
func (_m *UserRepository) NewNullString(str *string) sql.NullString {
	ret := _m.Called(str)

	if len(ret) == 0 {
		panic("no return value specified for NewNullString")
	}

	var r0 sql.NullString
	if rf, ok := ret.Get(0).(func(*string) sql.NullString); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Get(0).(sql.NullString)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, query, dest, args
func (_m *UserRepository) Query(ctx context.Context, query string, dest []interface{}, args []interface{}) error {
	ret := _m.Called(ctx, query, dest, args)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, []interface{}) error); ok {
		r0 = rf(ctx, query, dest, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rollback provides a mock function with given fields: tx
func (_m *UserRepository) Rollback(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Slave provides a mock function with given fields:
func (_m *UserRepository) Slave() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Slave")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) UpdateUser(ctx context.Context, tx *sql.Tx, user *model.User) error {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
